<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:json="http://www.mulesoft.org/schema/mule/json"
	xmlns:siebel="http://www.mulesoft.org/schema/mule/siebel" xmlns:data-mapper="http://www.mulesoft.org/schema/mule/ee/data-mapper" xmlns:db="http://www.mulesoft.org/schema/mule/db"
	  xmlns:batch="http://www.mulesoft.org/schema/mule/batch"
	  xmlns:sfdc="http://www.mulesoft.org/schema/mule/sfdc"
	  xmlns:tracking="http://www.mulesoft.org/schema/mule/ee/tracking"
      xmlns="http://www.mulesoft.org/schema/mule/core"
      xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
      xmlns:spring="http://www.springframework.org/schema/beans"
      version="EE-3.6.0"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xsi:schemaLocation="http://www.mulesoft.org/schema/mule/json http://www.mulesoft.org/schema/mule/json/current/mule-json.xsd
http://www.mulesoft.org/schema/mule/db http://www.mulesoft.org/schema/mule/db/current/mule-db.xsd
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/ee/tracking http://www.mulesoft.org/schema/mule/ee/tracking/current/mule-tracking-ee.xsd
http://www.mulesoft.org/schema/mule/batch http://www.mulesoft.org/schema/mule/batch/current/mule-batch.xsd
http://www.mulesoft.org/schema/mule/sfdc http://www.mulesoft.org/schema/mule/sfdc/current/mule-sfdc.xsd
http://www.mulesoft.org/schema/mule/siebel http://www.mulesoft.org/schema/mule/siebel/2.0/mule-siebel.xsd
http://www.mulesoft.org/schema/mule/ee/data-mapper http://www.mulesoft.org/schema/mule/ee/data-mapper/current/mule-data-mapper.xsd">

    <batch:job name="syncAccountsBatch">
        <batch:threading-profile poolExhaustedAction="WAIT"/>
        <batch:process-records>
            <batch:step name="getAccountFromSiebelStep">
                <enricher source="#[payload]" target="#[recordVars['siebelAccount']]" doc:name="Store payload into variable 'siebelAccount'">
                    <siebel:query-business-components config-ref="OracleSiebelBusinessObjects" businessObjectComponentType="Account.Account" doc:name="query Accounts from Siebel" searchExpression="[Name] = &quot;#[payload.Name]&quot;">
		                <siebel:fields-to-retrieve>
		                	<siebel:fields-to-retrieve>Id</siebel:fields-to-retrieve>
		                	<siebel:fields-to-retrieve>Name</siebel:fields-to-retrieve>
		                	<siebel:fields-to-retrieve>Employees</siebel:fields-to-retrieve>
		                	<siebel:fields-to-retrieve>Street Address</siebel:fields-to-retrieve>
		                	<siebel:fields-to-retrieve>City</siebel:fields-to-retrieve>
		                </siebel:fields-to-retrieve>
                    </siebel:query-business-components>
                </enricher>
					<expression-component
						doc:name="prepare for upsert"><![CDATA[// setup ID
	if (!(recordVars['siebelAccount'] instanceof NullPayload) && recordVars['siebelAccount'].size() >0) {
		// Add siebel ID as it is an update
	    payload.put('SiebelId', recordVars['siebelAccount'].get(0).get('Id'))
	}
	]]></expression-component>
            </batch:step>
            <batch:step name="DataTransformationStep">
                <data-mapper:transform config-ref="DataMapper"  doc:name="Map Salesforce Account to Siebel Account"/>
            </batch:step>
			<batch:step name="upsertAccountsInSiebelStep">
				<batch:commit size="200" doc:name="Batch Commit">
			        <set-payload value="#[payload[0]]" doc:name="Set Payload as Map"/>
			        <logger message="Accounts to update/create: #[payload]" level="INFO" doc:name="log Accounts to update/create"/>
			        <siebel:upsert-business-component config-ref="OracleSiebelBusinessObjects" businessObjectComponentType="Account.Account" doc:name="Oracle Siebel Business Object">
			            <siebel:business-component-fields ref="#[payload]"/>
			        </siebel:upsert-business-component>
			        <logger message="Upsert result: #[payload]" level="ERROR" doc:name="log Result"/>
   				</batch:commit>
			</batch:step>
        </batch:process-records>
		<batch:on-complete>
			<json:object-to-json-transformer
				doc:name="transform BatchJobInstance to JSON" />
			<logger level="INFO" doc:name="log 'Broadcast process has finished'"
				message="Broadcast process has finished: #[payload]" />
		</batch:on-complete>
    </batch:job>

</mule>
